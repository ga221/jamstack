// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and
// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
// same ids are connected.
// Example:
// "Print to console": {
// 	"prefix": "log",
// 	"body": [
// 		"console.log('$1');",
// 		"$2"
// 	],
// 	"description": "Log output to console"
// }

{
  "Print to console": {
    "prefix": "log",
    "body": ["PRINTF(\"$1 \\r\\n\", $2);", "$0"],
    "description": "Log output to console"
  },

  "Class snippet": {
    "prefix": "classm",
    "body": [
      "class ${1:MyClass}",
      "{",
      "public:",
      "  ${1:MyClass}() {}",
      "  ~${1:MyClass}() {}",
      "  $2",
      "private:",
      "  $3",
      "};"
    ],
    "description": "Class snippet"
  },

  "Header guards": {
    "prefix": "guards",
    "body": [
      "#pragma once",
      "#ifndef JAMSTACK_${TM_FILENAME_BASE/(.*)/${1:/upcase}/}",
      "#define JAMSTACK_${TM_FILENAME_BASE/(.*)/${1:/upcase}/}",
      "$0",
      "#endif // JAMSTACK_${TM_FILENAME_BASE/(.*)/${1:/upcase}/}"
    ],
    "description": "Log output to console"
  },

  "Doc comment": {
    "prefix": "fdoc",
    "body": [
      "/**",
      " * ${1:Function description}",
      " *",
      " * @param ${2:name} ${3:Param description}",
      " * @return ${4:Return description}",
      " */",
      "$0"
    ],
    "description": "Log output to console"
  }
}
